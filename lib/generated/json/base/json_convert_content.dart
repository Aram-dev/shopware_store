// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:shopware_store/features/shopware/domain/models/product_listing_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<ProductListingEntity>[] is M) {
      return data.map<ProductListingEntity>((Map<String, dynamic> e) =>
          ProductListingEntity.fromJson(e)).toList() as M;
    }
    if (<ProductListingElements>[] is M) {
      return data.map<ProductListingElements>((Map<String, dynamic> e) =>
          ProductListingElements.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsExtensions>[] is M) {
      return data.map<ProductListingElementsExtensions>((
          Map<String, dynamic> e) =>
          ProductListingElementsExtensions.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsExtensionsSearch>[] is M) {
      return data.map<ProductListingElementsExtensionsSearch>((
          Map<String, dynamic> e) =>
          ProductListingElementsExtensionsSearch.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsTranslated>[] is M) {
      return data.map<ProductListingElementsTranslated>((
          Map<String, dynamic> e) =>
          ProductListingElementsTranslated.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsTranslatedCustomFields>[] is M) {
      return data
          .map<ProductListingElementsTranslatedCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingElementsTranslatedCustomFields.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingElementsTax>[] is M) {
      return data.map<ProductListingElementsTax>((Map<String, dynamic> e) =>
          ProductListingElementsTax.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsManufacturer>[] is M) {
      return data.map<ProductListingElementsManufacturer>((
          Map<String, dynamic> e) =>
          ProductListingElementsManufacturer.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsManufacturerTranslated>[] is M) {
      return data
          .map<ProductListingElementsManufacturerTranslated>((
          Map<String, dynamic> e) =>
          ProductListingElementsManufacturerTranslated.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingElementsManufacturerTranslatedCustomFields>[] is M) {
      return data
          .map<
          ProductListingElementsManufacturerTranslatedCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingElementsManufacturerTranslatedCustomFields.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingElementsCover>[] is M) {
      return data.map<ProductListingElementsCover>((Map<String, dynamic> e) =>
          ProductListingElementsCover.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsCoverMedia>[] is M) {
      return data.map<ProductListingElementsCoverMedia>((
          Map<String, dynamic> e) =>
          ProductListingElementsCoverMedia.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsCoverMediaTranslated>[] is M) {
      return data.map<ProductListingElementsCoverMediaTranslated>((
          Map<String, dynamic> e) =>
          ProductListingElementsCoverMediaTranslated.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsCoverMediaTranslatedCustomFields>[] is M) {
      return data
          .map<ProductListingElementsCoverMediaTranslatedCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingElementsCoverMediaTranslatedCustomFields.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingElementsCustomFields>[] is M) {
      return data.map<ProductListingElementsCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingElementsCustomFields.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsCalculatedPrice>[] is M) {
      return data.map<ProductListingElementsCalculatedPrice>((
          Map<String, dynamic> e) =>
          ProductListingElementsCalculatedPrice.fromJson(e)).toList() as M;
    }
    if (<ProductListingElementsCalculatedPriceCalculatedTaxes>[] is M) {
      return data
          .map<ProductListingElementsCalculatedPriceCalculatedTaxes>((
          Map<String, dynamic> e) =>
          ProductListingElementsCalculatedPriceCalculatedTaxes.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingElementsCalculatedPriceTaxRules>[] is M) {
      return data
          .map<ProductListingElementsCalculatedPriceTaxRules>((
          Map<String, dynamic> e) =>
          ProductListingElementsCalculatedPriceTaxRules.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingElementsCalculatedCheapestPrice>[] is M) {
      return data
          .map<ProductListingElementsCalculatedCheapestPrice>((
          Map<String, dynamic> e) =>
          ProductListingElementsCalculatedCheapestPrice.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingElementsCalculatedCheapestPriceCalculatedTaxes>[] is M) {
      return data.map<
          ProductListingElementsCalculatedCheapestPriceCalculatedTaxes>((
          Map<String, dynamic> e) =>
          ProductListingElementsCalculatedCheapestPriceCalculatedTaxes.fromJson(
              e)).toList() as M;
    }
    if (<ProductListingElementsCalculatedCheapestPriceTaxRules>[] is M) {
      return data
          .map<ProductListingElementsCalculatedCheapestPriceTaxRules>((
          Map<String, dynamic> e) =>
          ProductListingElementsCalculatedCheapestPriceTaxRules.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingAggregations>[] is M) {
      return data.map<ProductListingAggregations>((Map<String, dynamic> e) =>
          ProductListingAggregations.fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsManufacturer>[] is M) {
      return data.map<ProductListingAggregationsManufacturer>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsManufacturer.fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsManufacturerEntities>[] is M) {
      return data
          .map<ProductListingAggregationsManufacturerEntities>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsManufacturerEntities.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingAggregationsManufacturerEntitiesTranslated>[] is M) {
      return data
          .map<
          ProductListingAggregationsManufacturerEntitiesTranslated>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsManufacturerEntitiesTranslated.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingAggregationsManufacturerEntitiesTranslatedCustomFields>[
    ] is M) {
      return data.map<
          ProductListingAggregationsManufacturerEntitiesTranslatedCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsManufacturerEntitiesTranslatedCustomFields
              .fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsPrice>[] is M) {
      return data.map<ProductListingAggregationsPrice>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPrice.fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsRating>[] is M) {
      return data.map<ProductListingAggregationsRating>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsRating.fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsShippingFree>[] is M) {
      return data.map<ProductListingAggregationsShippingFree>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsShippingFree.fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsProperties>[] is M) {
      return data.map<ProductListingAggregationsProperties>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsProperties.fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsPropertiesEntities>[] is M) {
      return data
          .map<ProductListingAggregationsPropertiesEntities>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntities.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingAggregationsPropertiesEntitiesTranslated>[] is M) {
      return data
          .map<ProductListingAggregationsPropertiesEntitiesTranslated>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesTranslated.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingAggregationsPropertiesEntitiesTranslatedCustomFields>[
    ] is M) {
      return data.map<
          ProductListingAggregationsPropertiesEntitiesTranslatedCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesTranslatedCustomFields
              .fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsPropertiesEntitiesOptions>[] is M) {
      return data
          .map<ProductListingAggregationsPropertiesEntitiesOptions>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesOptions.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingAggregationsPropertiesEntitiesOptionsTranslated>[
    ] is M) {
      return data.map<
          ProductListingAggregationsPropertiesEntitiesOptionsTranslated>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesOptionsTranslated
              .fromJson(e)).toList() as M;
    }
    if (<
        ProductListingAggregationsPropertiesEntitiesOptionsTranslatedCustomFields>[
    ] is M) {
      return data.map<
          ProductListingAggregationsPropertiesEntitiesOptionsTranslatedCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesOptionsTranslatedCustomFields
              .fromJson(e)).toList() as M;
    }
    if (<ProductListingAggregationsPropertiesEntitiesOptionsGroup>[] is M) {
      return data
          .map<
          ProductListingAggregationsPropertiesEntitiesOptionsGroup>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesOptionsGroup.fromJson(e))
          .toList() as M;
    }
    if (<ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslated>[
    ] is M) {
      return data.map<
          ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslated>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslated
              .fromJson(e)).toList() as M;
    }
    if (<
        ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslatedCustomFields>[
    ] is M) {
      return data.map<
          ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslatedCustomFields>((
          Map<String, dynamic> e) =>
          ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslatedCustomFields
              .fromJson(e)).toList() as M;
    }
    if (<ProductListingCurrentFilters>[] is M) {
      return data.map<ProductListingCurrentFilters>((Map<String, dynamic> e) =>
          ProductListingCurrentFilters.fromJson(e)).toList() as M;
    }
    if (<ProductListingCurrentFiltersPrice>[] is M) {
      return data.map<ProductListingCurrentFiltersPrice>((
          Map<String, dynamic> e) =>
          ProductListingCurrentFiltersPrice.fromJson(e)).toList() as M;
    }
    if (<ProductListingAvailableSortings>[] is M) {
      return data.map<ProductListingAvailableSortings>((
          Map<String, dynamic> e) =>
          ProductListingAvailableSortings.fromJson(e)).toList() as M;
    }
    if (<ProductListingAvailableSortingsTranslated>[] is M) {
      return data.map<ProductListingAvailableSortingsTranslated>((
          Map<String, dynamic> e) =>
          ProductListingAvailableSortingsTranslated.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (ProductListingEntity).toString(): ProductListingEntity.fromJson,
    (ProductListingElements).toString(): ProductListingElements.fromJson,
    (ProductListingElementsExtensions)
        .toString(): ProductListingElementsExtensions.fromJson,
    (ProductListingElementsExtensionsSearch)
        .toString(): ProductListingElementsExtensionsSearch.fromJson,
    (ProductListingElementsTranslated)
        .toString(): ProductListingElementsTranslated.fromJson,
    (ProductListingElementsTranslatedCustomFields)
        .toString(): ProductListingElementsTranslatedCustomFields.fromJson,
    (ProductListingElementsTax).toString(): ProductListingElementsTax.fromJson,
    (ProductListingElementsManufacturer)
        .toString(): ProductListingElementsManufacturer.fromJson,
    (ProductListingElementsManufacturerTranslated)
        .toString(): ProductListingElementsManufacturerTranslated.fromJson,
    (ProductListingElementsManufacturerTranslatedCustomFields)
        .toString(): ProductListingElementsManufacturerTranslatedCustomFields
        .fromJson,
    (ProductListingElementsCover).toString(): ProductListingElementsCover
        .fromJson,
    (ProductListingElementsCoverMedia)
        .toString(): ProductListingElementsCoverMedia.fromJson,
    (ProductListingElementsCoverMediaTranslated)
        .toString(): ProductListingElementsCoverMediaTranslated.fromJson,
    (ProductListingElementsCoverMediaTranslatedCustomFields)
        .toString(): ProductListingElementsCoverMediaTranslatedCustomFields
        .fromJson,
    (ProductListingElementsCustomFields)
        .toString(): ProductListingElementsCustomFields.fromJson,
    (ProductListingElementsCalculatedPrice)
        .toString(): ProductListingElementsCalculatedPrice.fromJson,
    (ProductListingElementsCalculatedPriceCalculatedTaxes)
        .toString(): ProductListingElementsCalculatedPriceCalculatedTaxes
        .fromJson,
    (ProductListingElementsCalculatedPriceTaxRules)
        .toString(): ProductListingElementsCalculatedPriceTaxRules.fromJson,
    (ProductListingElementsCalculatedCheapestPrice)
        .toString(): ProductListingElementsCalculatedCheapestPrice.fromJson,
    (ProductListingElementsCalculatedCheapestPriceCalculatedTaxes)
        .toString(): ProductListingElementsCalculatedCheapestPriceCalculatedTaxes
        .fromJson,
    (ProductListingElementsCalculatedCheapestPriceTaxRules)
        .toString(): ProductListingElementsCalculatedCheapestPriceTaxRules
        .fromJson,
    (ProductListingAggregations).toString(): ProductListingAggregations
        .fromJson,
    (ProductListingAggregationsManufacturer)
        .toString(): ProductListingAggregationsManufacturer.fromJson,
    (ProductListingAggregationsManufacturerEntities)
        .toString(): ProductListingAggregationsManufacturerEntities.fromJson,
    (ProductListingAggregationsManufacturerEntitiesTranslated)
        .toString(): ProductListingAggregationsManufacturerEntitiesTranslated
        .fromJson,
    (ProductListingAggregationsManufacturerEntitiesTranslatedCustomFields)
        .toString(): ProductListingAggregationsManufacturerEntitiesTranslatedCustomFields
        .fromJson,
    (ProductListingAggregationsPrice)
        .toString(): ProductListingAggregationsPrice.fromJson,
    (ProductListingAggregationsRating)
        .toString(): ProductListingAggregationsRating.fromJson,
    (ProductListingAggregationsShippingFree)
        .toString(): ProductListingAggregationsShippingFree.fromJson,
    (ProductListingAggregationsProperties)
        .toString(): ProductListingAggregationsProperties.fromJson,
    (ProductListingAggregationsPropertiesEntities)
        .toString(): ProductListingAggregationsPropertiesEntities.fromJson,
    (ProductListingAggregationsPropertiesEntitiesTranslated)
        .toString(): ProductListingAggregationsPropertiesEntitiesTranslated
        .fromJson,
    (ProductListingAggregationsPropertiesEntitiesTranslatedCustomFields)
        .toString(): ProductListingAggregationsPropertiesEntitiesTranslatedCustomFields
        .fromJson,
    (ProductListingAggregationsPropertiesEntitiesOptions)
        .toString(): ProductListingAggregationsPropertiesEntitiesOptions
        .fromJson,
    (ProductListingAggregationsPropertiesEntitiesOptionsTranslated)
        .toString(): ProductListingAggregationsPropertiesEntitiesOptionsTranslated
        .fromJson,
    (ProductListingAggregationsPropertiesEntitiesOptionsTranslatedCustomFields)
        .toString(): ProductListingAggregationsPropertiesEntitiesOptionsTranslatedCustomFields
        .fromJson,
    (ProductListingAggregationsPropertiesEntitiesOptionsGroup)
        .toString(): ProductListingAggregationsPropertiesEntitiesOptionsGroup
        .fromJson,
    (ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslated)
        .toString(): ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslated
        .fromJson,
    (ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslatedCustomFields)
        .toString(): ProductListingAggregationsPropertiesEntitiesOptionsGroupTranslatedCustomFields
        .fromJson,
    (ProductListingCurrentFilters).toString(): ProductListingCurrentFilters
        .fromJson,
    (ProductListingCurrentFiltersPrice)
        .toString(): ProductListingCurrentFiltersPrice.fromJson,
    (ProductListingAvailableSortings)
        .toString(): ProductListingAvailableSortings.fromJson,
    (ProductListingAvailableSortingsTranslated)
        .toString(): ProductListingAvailableSortingsTranslated.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}